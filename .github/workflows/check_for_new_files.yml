name: Validate CODEOWNERS
on:
  pull_request:
    branches: [test-codeowners-workflow]
jobs:
  checkIfCodeownersUpdateNeeded:
    permissions:
      pull-requests: write
    name: Check if CODEOWNERS needs to be updated
    runs-on: ubuntu-latest
    steps:
      - name: Get count of added files
        id: get-added-files
        uses: actions/github-script@v6.4.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const { issue: { number: issue_number }, repo: { owner, repo } } = context;

            github.paginate('GET /repos/{owner}/{repo}/pulls/{pull_number}/files', { owner, repo, pull_number: issue_number },
              (response) => response.data.filter((file) => file.status === 'added')).then((files) => { core.setOutput("NEW_FILES", files);
              core.setOutput("NEW_FILES_COUNT", files.length)});
      - name: Print out added files
        run: |
          echo "New files: ${{ env.NEW_FILES }}"
      - name: Install npm package ignore
        if: ${{ env.NEW_FILES_COUNT > 0 }}
        run: yarn add ignore -W # help verify CODEOWNERS
      - name: Check file against CODEOWNERS
        if: ${{ env.NEW_FILES_COUNT > 0 }}
        uses: actions/github-script@v6.4.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const ignore = require('ignore');
            const { NEW_FILES } = process.env
            console.log(NEW_FILES);

            const response = await fetch('https://raw.githubusercontent.com/timngyn/docs/test-codeowners-workflow/.github/CODEOWNERS');
            const body = await response.text();

            const codeownersFilePatterns = body
              .split('\n')
              .filter(e => !e.startsWith('#'))
              .filter(e => !e.includes('aws-amplify/documentation-team'))
              .filter(e => e.length > 1).map(e => e.split(/\s+/)[0]);

            console.log(codeownersFilePatterns);

            const ig = ignore().add(codeownersFilePatterns);
            const filesNotInCodeowners = [];

            NEW_FILES.split(' ').forEach(newFile => {
              if (!ig.ignores(newFile)) {
                console.log(`${newFile} is not covered by CODEOWNERS`);
                filesNotInCodeowners.push(newFile);
              }
            });

            const { issue: { number: issue_number }, repo: { owner, repo } } = context;
            if (filesNotInCodeowners.length > 0) {
              const needCodeownersUpdateComment = `CODEOWNERS need to be updated because these new files are not covered:\n
              ${filesNotInCodeowners.map(e => `- ${e}\n`).join('')}
             `;
              github.rest.issues.createComment({owner, repo, issue_number, body: needCodeownersUpdateComment})
              const labels = ['update-codeowners'];
              github.rest.issues.addLabels({ owner, repo, issue_number, labels});
            }
